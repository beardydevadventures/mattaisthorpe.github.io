{"version":3,"sources":["GitRepoList/GitRepoList.js","LatestBlogList/LatestBlogList.js","App/App.js","serviceWorker.js","index.js"],"names":["GitRepoList","props","state","error","isLoaded","items","headers","Headers","append","fetch","method","then","res","json","result","setState","this","message","Card","CardContent","Typography","variant","gutterBottom","List","component","aria-label","map","item","Fragment","key","id","ListItem","button","href","html_url","ListItemIcon","ListItemText","primary","name","secondary","description","React","Component","LatestBlogList","link","title","rendered","excerpt","replace","darkTheme","createMuiTheme","palette","type","App","ThemeProvider","theme","CssBaseline","Container","fixed","Grid","container","spacing","xs","align","Button","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.248dd14f.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FolderOutlined from '@material-ui/icons/FolderOutlined';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nclass GitRepoList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            items: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const headers = new Headers();\r\n        headers.append('Authorization', 'Basic bWF0dHlhY2U6NTIyMWFkN2Y5OTk3MWU0MWZmMGJkNTI5ODQwZWMzMTgzNzA0NzJlMA==');\r\n        headers.append('User-Agent', ': user-page-app');\r\n\r\n        const init = {\r\n            method: 'GET',\r\n            headers\r\n        }\r\n\r\n        fetch(\"https://api.github.com/users/mattyace/repos\", init)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        items: result\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, items } = this.state;\r\n        if (error) {\r\n            return <div><p>Error: {error.message}</p></div>;\r\n        } else if (!isLoaded) {\r\n            return <div><p>Loading...</p></div>;\r\n        } else {\r\n            return (\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h4\" gutterBottom>\r\n                        Public Git Repos\r\n                        </Typography>\r\n                        <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                            {items.map(function (item) {\r\n                                return (\r\n                                    <React.Fragment key={item.id}>\r\n                                        <ListItem button component=\"a\" href={item.html_url}>\r\n                                            <ListItemIcon>\r\n                                                <FolderOutlined />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary={item.name} secondary={item.description} />\r\n                                        </ListItem>\r\n                                    </React.Fragment>\r\n                                );\r\n                            })}\r\n                        </List>\r\n                    </CardContent>\r\n                </Card>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default GitRepoList;\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CreateOutlined from '@material-ui/icons/CreateOutlined';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nclass LatestBlogList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            items: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://matthewaisthorpe.com.au/wp-json/wp/v2/posts?per_page=5\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        items: result\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, items } = this.state;\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            return (\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h4\" gutterBottom>\r\n                            Latest Blog Posts\r\n                        </Typography>\r\n                        <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                            {items.map(function (item) {\r\n                                return (\r\n                                    <React.Fragment key={item.id}>\r\n                                        <ListItem button component=\"a\" href={item.link}>\r\n                                            <ListItemIcon>\r\n                                                <CreateOutlined />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary={item.title.rendered} secondary={item.excerpt.rendered.replace(/<[^>]*>?/gm, '')}/>\r\n                                        </ListItem>\r\n                                    </React.Fragment>\r\n                                );\r\n                            })}\r\n                        </List>\r\n                    </CardContent>\r\n                </Card>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default LatestBlogList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport GitRepoList from '../GitRepoList/GitRepoList';\r\nimport LatestBlogList from '../LatestBlogList/LatestBlogList';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  }\r\n});\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <ThemeProvider theme={darkTheme}>\r\n        <CssBaseline />\r\n        <Container fixed>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h1\" align=\"center\">\r\n                Mattyace\r\n              </Typography>\r\n              <Typography variant=\"h3\" align=\"center\" gutterBottom>\r\n                Github Page\r\n              </Typography>\r\n              <Button variant=\"contained\" color=\"primary\" href=\"https://matthewaisthorpe.com.au/\">\r\n                View my Website <ChevronRight />\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <GitRepoList />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <LatestBlogList />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"caption\">\r\n                    This page was created using react and material ui.\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}