{"version":3,"sources":["GitRepoList/GitRepoList.js","LatestBlogList/LatestBlogList.js","Menu/MenuItems.js","Menu/Menu.js","App/App.js","serviceWorker.js","index.js"],"names":["GitRepoList","props","state","error","isLoaded","items","headers","Headers","append","fetch","method","then","res","json","result","setState","this","Card","CardContent","Typography","variant","gutterBottom","List","component","map","item","Fragment","key","id","ListItem","button","href","html_url","ListItemIcon","ListItemText","primary","name","secondary","description","LinearProgress","console","log","message","React","Component","LatestBlogList","link","title","rendered","excerpt","replace","MenuItems","short_name","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","list","width","Menu","onToggleDark","classes","useState","left","checked","toggleDrawer","open","event","type","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","FormGroup","row","FormControlLabel","control","Switch","onChange","target","label","Drawer","anchor","onClose","clsx","role","Divider","App","palette","setTheme","muiTheme","createMuiTheme","ThemeProvider","CssBaseline","newPaletteType","Container","fixed","Grid","container","xs","align","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b90c6713.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\n\r\nclass GitRepoList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            items: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const headers = new Headers();\r\n        headers.append('Authorization', 'Basic bWF0dHlhY2U6NTIyMWFkN2Y5OTk3MWU0MWZmMGJkNTI5ODQwZWMzMTgzNzA0NzJlMA==');\r\n        headers.append('User-Agent', ': user-page-app');\r\n\r\n        const init = {\r\n            method: 'GET',\r\n            headers\r\n        }\r\n\r\n        fetch(\"https://api.github.com/users/mattaisthorpe/repos?sort=updated\", init)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        items: result\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, items } = this.state;\r\n        if (error) {\r\n            console.log(\"Error: \" + error.message);\r\n        } else if (!isLoaded) {\r\n            return <LinearProgress />;\r\n        } else {\r\n            return (\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h4\" gutterBottom>\r\n                            Public Git Repos\r\n                        </Typography>\r\n                        <List component=\"nav\">\r\n                            {items.map(function (item) {\r\n                                return (\r\n                                    <React.Fragment key={item.id}>\r\n                                        <ListItem button component=\"a\" href={item.html_url}>\r\n                                            <ListItemIcon>\r\n                                                <GitHubIcon />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary={item.name} secondary={item.description} />\r\n                                        </ListItem>\r\n                                    </React.Fragment>\r\n                                );\r\n                            })}\r\n                        </List>\r\n                    </CardContent>\r\n                </Card>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default GitRepoList;\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nimport Description from '@material-ui/icons/Description';\r\n\r\nclass LatestBlogList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            items: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://matthewaisthorpe.com.au/wp-json/wp/v2/posts?per_page=5\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        items: result\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, items } = this.state;\r\n        if (error) {\r\n            console.log(\"Error: \" + error.message);\r\n        } else if (!isLoaded) {\r\n            return <LinearProgress />;\r\n        } else {\r\n            return (\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h4\" gutterBottom>\r\n                            Latest Blog Posts\r\n                        </Typography>\r\n                        <List component=\"nav\">\r\n                            {items.map(function (item) {\r\n                                return (\r\n                                    <React.Fragment key={item.id}>\r\n                                        <ListItem button component=\"a\" href={item.link}>\r\n                                            <ListItemIcon>\r\n                                                <Description />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary={item.title.rendered} secondary={item.excerpt.rendered.replace(/<[^>]*>?/gm, '')}/>\r\n                                        </ListItem>\r\n                                    </React.Fragment>\r\n                                );\r\n                            })}\r\n                        </List>\r\n                    </CardContent>\r\n                </Card>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default LatestBlogList;\r\n","export const MenuItems = [\r\n    {\r\n        name: \"LinkedIn\",\r\n        short_name: \"linked-site\",\r\n        link: \"https://www.linkedin.com/in/matthewaisthorpe\",\r\n    },\r\n    {\r\n        name: \"Portfolio Site\",\r\n        short_name: \"port-site\",\r\n        link: \"https://matthewaisthorpe.com.au/\",\r\n    },\r\n    {\r\n        name: \"GitHub Profile\",\r\n        short_name: \"git-site\",\r\n        link: \"https://github.com/mattaisthorpe\",\r\n    },\r\n    {\r\n        name: \"Sketchfab\",\r\n        short_name: \"sketch-site\",\r\n        link: \"https://sketchfab.com/mattyace\",\r\n    },\r\n];\r\n\r\nexport default MenuItems;","import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport MenuItems from './MenuItems';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    list: {\r\n        width: 250,\r\n    },\r\n}));\r\n\r\nconst Menu = ({ onToggleDark }) => {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = useState({\r\n        left: false,\r\n        checked: true\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        onToggleDark();\r\n        setState({ ...state, ['checked']: event.target.checked });\r\n    };\r\n\r\n    const toggleDrawer = (open) => (event) => {\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n\r\n        setState({ ...state, ['left']: open });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={toggleDrawer(true)}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Matthew Aisthorpe\r\n                    </Typography>\r\n                    <FormGroup row>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    onChange={handleChange}\r\n                                    checked={state.checked}\r\n                                />\r\n                            }\r\n                            label=\"Lights\"\r\n                        />\r\n                    </FormGroup>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Drawer anchor='left' open={state['left']} onClose={toggleDrawer(false)}>\r\n                <div\r\n                    className={clsx(classes.list)}\r\n                    role=\"presentation\"\r\n                >\r\n                    <List component=\"nav\">\r\n                        <ListItem button key='Close' onClick={toggleDrawer(false)}>\r\n                            <ListItemIcon><MenuIcon /></ListItemIcon>\r\n                            <ListItemText primary='Close' />\r\n                        </ListItem>\r\n                        <Divider />\r\n                        {MenuItems.map((item) => (\r\n                            <ListItem button key={item.short_name} component=\"a\" href={item.link}>\r\n                                <ListItemIcon><ArrowForwardIosIcon /></ListItemIcon>\r\n                                <ListItemText primary={item.name} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </div>\r\n            </Drawer>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Menu;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport GitRepoList from '../GitRepoList/GitRepoList';\r\nimport LatestBlogList from '../LatestBlogList/LatestBlogList';\r\nimport Menu from '../Menu/Menu';\r\n\r\n\r\nconst App = () => {\r\n  const [theme, setTheme] = useState({\r\n    palette: {\r\n      type: \"light\"\r\n    }\r\n  });\r\n\r\n  const toggleDarkTheme = () => {\r\n    let newPaletteType = theme.palette.type === \"light\" ? \"dark\" : \"light\";\r\n    setTheme({\r\n      palette: {\r\n        type: newPaletteType\r\n      }\r\n    });\r\n  };\r\n\r\n  const muiTheme = createMuiTheme(theme);\r\n\r\n  return (\r\n    <ThemeProvider theme={muiTheme}>\r\n      <CssBaseline />\r\n      <Menu onToggleDark={toggleDarkTheme} />\r\n      <Container fixed>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h1\" align=\"center\">\r\n              Welcome to my Github Page!\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <LatestBlogList />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <GitRepoList />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"caption\">\r\n                  This page was by me created using react and material ui.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}